#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent a task
struct Task {
    string description;
    bool completed;

    Task(string desc) : description(desc), completed(false) {}
};

// Function to display the list of tasks
void displayTasks(const vector<Task>& tasks) {
    cout << "TO-DO LIST\n";
    cout << "--------------------------------\n";

    for (size_t i = 0; i < tasks.size(); ++i) {
        cout << i + 1 << ". " << (tasks[i].completed ? "[X] " : "[ ] ") << tasks[i].description << "\n";
    }

    cout << "--------------------------------\n";
}

// Function to add a new task to the list
void addTask(vector<Task>& tasks, const string& description) {
    Task newTask(description);
    tasks.push_back(newTask);
    cout << "Task added: " << description << "\n";
}

// Function to mark a task as completed
void markTaskCompleted(vector<Task>& tasks, size_t index) {
    if (index >= 0 && index < tasks.size()) {
        tasks[index].completed = true;
        cout << "Task marked as completed: " << tasks[index].description << "\n";
    } else {
        cout << "Invalid task index.\n";
    }
}

// Function to remove a task from the list
void removeTask(vector<Task>& tasks, size_t index) {
    if (index >= 0 && index < tasks.size()) {
        cout << "Task removed: " << tasks[index].description << "\n";
        tasks.erase(tasks.begin() + index);
    } else {
        cout << "Invalid task index.\n";
    }
}

int main() {
    vector<Task> tasks;

    cout << "SIMPLE TO-DO LIST MANAGER\n";

    while (true) {
        cout << "\n1. Add Task\n2. View Tasks\n3. Mark Task as Completed\n4. Remove Task\n5. Exit\n";
        cout << "Choose an option: ";

        int choice;
        cin >> choice;

        switch (choice) {
            case 1: {
                string description;
                cout << "Enter task description: ";
                cin.ignore();  // Ignore the newline character left in the buffer
                getline(cin, description);
                addTask(tasks, description);
                break;
            }
            case 2:
                displayTasks(tasks);
                break;
            case 3: {
                size_t index;
                cout << "Enter task index to mark as completed: ";
                cin >> index;
                markTaskCompleted(tasks, index - 1);
                break;
            }
            case 4: {
                size_t index;
                cout << "Enter task index to remove: ";
                cin >> index;
                removeTask(tasks, index - 1);
                break;
            }
            case 5:
                cout << "Thanks for using the to-do list manager. Exiting...\n";
                return 0;
            default:
                cout << "Invalid choice. Please choose a valid option.\n";
        }
    }

    return 0;
}
